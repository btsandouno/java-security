package com.polytech;

/**
* TD2 - RSA signature, encryption/decryption
*
* asymetric clearTextFile SignatureFile CipheredFile DecipheredFile
**/

import java.security.*;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;


import java.io.*;

public class Asymetric{

static void KeyExchangeProtocol() throws Exception{
Entity Alice=new Entity();
Entity bob =new Entity();

// Alice sends her public key to Bob.
PublicKey alice_public_key=Alice.thePublicKey;
System.out.println("HI BOB, This is my public key : \n"+alice_public_key+"\n");

// Bob generates a DES session key.
KeyGenerator deskey=KeyGenerator.getInstance("DES");
SecretKey BOB_symetric_key=deskey.generateKey();
System.out.println("This is the secret key generated by BOB: \n"+ BOB_symetric_key+"\n");

// Bob encrypts it with Alice’s public key.
byte [] BOB_encrypt_des=bob.encrypt(BOB_symetric_key.getEncoded(), alice_public_key);
System.out.println("Hello Alice, This is the DES key encrypted with your public key: \n "+new String(BOB_encrypt_des)+"\n");

// Alice decrypts the DES key with her private key.
byte[] ALICE_decrypt_des =Alice.decrypt(BOB_encrypt_des);
SecretKey Alice_symetric_key = new SecretKeySpec(ALICE_decrypt_des, "DES");
System.out.println("This is the secret key after being decrypted by Alice: \n"+Alice_symetric_key+"\n");

//  Alice sends a message to Bob with the session key
String Alice_The_Message = new String("Hello BOB, are you ready for a hangout?");
System.out.println("The message to be encrypted is: \n "+Alice_The_Message+"\n");
Cipher C1=Cipher.getInstance("DES");
C1.init(Cipher.ENCRYPT_MODE,Alice_symetric_key);
byte [] Alice_Message_Crypted = C1.doFinal(Alice_The_Message.getBytes()) ;
System.out.println("The encrypted message by Alice(to be sent to BOB) is: \n "+new String(Alice_Message_Crypted)+"\n\n\n");

// Bob decrypts the message with the session key.
Cipher C2=Cipher.getInstance("DES");
C2.init(Cipher.DECRYPT_MODE,BOB_symetric_key);
byte [] BOB_Message_Decrypted = C2.doFinal(Alice_Message_Crypted);
System.out.println("The decrypted message by BOB is : \n"+new String(BOB_Message_Decrypted));
}


static public void main(String argv[]){

// INITIALIZATION

// load the bouncycastle provider
//Provider prov = new org.bouncycastle.jce.provider.BouncyCastleProvider();
//Security.addProvider(prov);

// create two new entity
Entity Alice = new Entity();
Entity Bob = new Entity();

try{

// GET THE CLEAR TEXT
 File aFile = new File(argv[0]);
FileInputStream in = new FileInputStream(aFile);
byte[] aMessage = new byte[(int)aFile.length()];
in.read(aMessage);
in.close();

// RSA SIGNATURE
System.out.println("\nRSA SIGNATURE\n");
// MAKE ALICE SIGN IT
// display the clear text
System.out.println("Message == \n"+new String(aMessage));
// sign it
byte[] aSignature = Alice.sign(aMessage);
// display and store the signature
System.out.println("Alice Signature == \n"+new String(aSignature));
FileOutputStream out = new FileOutputStream(new File(argv[1]));
out.write(aSignature);
out.close();

// BOB CHECKS THE ALICE SIGNATURE
System.out.println("Bob signature verification == \n"+Bob.checkSignature(aMessage, aSignature, Alice.thePublicKey));

// MY RSA SIGNATURE
System.out.println("\nMY RSA SIGNATURE\n");
// MAKE ALICE SIGN IT
// display the clear text
System.out.println("Message == \n"+new String(aMessage));
// sign it
aSignature = Alice.mySign(aMessage);
// display and store the signature
System.out.println("Alice Signature == \n"+new String(aSignature));
out = new FileOutputStream(new File(argv[1]));
out.write(aSignature);
out.close();

// BOB CHECKS THE ALICE SIGNATURE
System.out.println("Bob signature verification == "+Bob.myCheckSignature(aMessage, aSignature, Alice.thePublicKey));

// RSA ENCRYPTION/DECRYPTION
System.out.println("\nRSA ENCRYPTION\n");
// bob encrypt a message with the alice public key
System.out.println("Clear Text == \n"+new String(aMessage));
byte[] aCiphered = Bob.encrypt(aMessage, Alice.thePublicKey);
System.out.println("Ciphered Text== \n"+new String(aCiphered)+"\n");
out = new FileOutputStream(new File(argv[2]));
out.write(aCiphered);
out.close();

// alice decrypt the message
byte[] aDeciphered = Alice.decrypt(aCiphered);
System.out.println("Deciphered Text== \n"+new String(aDeciphered));
out = new FileOutputStream(new File(argv[3]));
out.write(aDeciphered);
out.close();

// PROTOCOL IMPLEMENTATION
KeyExchangeProtocol();
}catch(Exception e){
e.printStackTrace();
System.out.println("java Asymetric clearTextFile SignatureFile CipheredFile DecipheredFile");
}



}

}